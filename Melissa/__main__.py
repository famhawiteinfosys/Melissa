import importlib
import re
import time
from platform import python_version as y
from sys import argv

from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import Melissa.modules.sql.users_sql as sql
from Melissa import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from Melissa.modules import ALL_MODULES
from Melissa.modules.helper_funcs.chat_status import is_user_admin
from Melissa.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time

start_txt = """
 ú·¥á è BABYü•Ä `{}`,  ú·¥è·¥° ·¥Ä Ä·¥á  è·¥è·¥ú‚ù£Ô∏è!!
"""
DONATION_LINK = "Aside"

PM_START_TEXT = """
*Hello BABY {} !*
¬ª *…™'·¥ç {BOT_NAME} !* ü´ß [ü•Ä](https://i.ibb.co/jbwpmTn/Melissa-as-Cop-Girl.jpg) ·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü MUSIC + ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò 
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
√ó *‚ú®Uptimeü•Ä:* `{}`
√ó `{}` *‚ú®users, ‚ú®acrossü•Ä* `{}` *chats.*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
¬ª  ú…™·¥õ /help ·¥õ·¥è Íú±·¥á·¥á ·¥ç è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±.
"""

buttons = [
        [
        InlineKeyboardButton(
            text="Add to Group", url=f"https://t.me/{BOT_USERNAME}?startgroup=true"
        )
    ],
    [
        InlineKeyboardButton(text="Command", callback_data="Melissa_"),
    ],
    [
        InlineKeyboardButton(text="About", callback_data="Melissa_admin"),
        InlineKeyboardButton(text="Owner", url=f"tg://user?id={OWNER_ID}"),
    ],
    [
        InlineKeyboardButton(text="Support", url="https://t.me/MelissaUpdates"),
        InlineKeyboardButton(text="Updates", url="https://t.me/MelissaUpdates"),
    ],
]


HELP_STRINGS = f"""
*¬ª {BOT_NAME} ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:*
¬ª /help: PM's  è·¥è·¥ú ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á.
¬ª /donate: …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥è…¥  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á!
¬ª /settings:
   ‚Ü£ …™…¥ ·¥ò·¥ç: ·¥°…™ ü ü s·¥á…¥·¥Ö  è·¥è·¥ú  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä ·¥Ä ü ü s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥è·¥Ö·¥ú ü·¥ás.
   ‚Ü£ …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò: ·¥°…™ ü ü  Ä·¥á·¥Ö…™ Ä·¥á·¥Ñ·¥õ  è·¥è·¥ú ·¥õ·¥è ·¥ò·¥ç, ·¥°…™·¥õ ú ·¥Ä ü ü ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ  s·¥á·¥õ·¥õ…™…¥…¢s.
"""


DONATE_STRING = """·¥ä·¥ús·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ús"""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}


for module_name in ALL_MODULES:
    imported_module = importlib.import_module(f"Melissa.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("·¥Ñ·¥Ä…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ·¥°·¥è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥°…™·¥õ ú ·¥õ ú·¥á s·¥Ä·¥ç·¥á …¥·¥Ä·¥ç·¥á! ·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥è…¥·¥á")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


def test(update: Update, context: CallbackContext):
    # pprint(eval(str(update)))
    # update.effective_message.reply_text("Hola tester! _I_ *have* `markdown`", parse_mode=ParseMode.MARKDOWN)
    update.effective_message.reply_text("·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ ·¥á·¥Ö…™·¥õ·¥á·¥Ö ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á")
    print(update.effective_message)


def start(update: Update, context: CallbackContext):
    args = context.args
    usr = update.effective_user
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if mod == "Admins":
                    mod = "Admins"
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="Back", callback_data="help_back"
                                )
                            ]
                        ]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match[1])

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match[1], update.effective_user.id, False)
                else:
                    send_settings(match[1], update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            lel = update.effective_message.reply_text(
                start_txt.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(1.2)
            lel.edit_text(f"·¥°·¥Ä…™·¥õ  ô·¥Ä ô èüñ§!  ü·¥á·¥õ ·¥ç·¥á …¢·¥á·¥õ Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö \nÍú±·¥è ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥ç è ·¥ò·¥è·¥°·¥á Ä‚ú®‚ù£Ô∏èü•Ä")
            time.sleep(1.2)
            lel.delete()
            K = update.effective_message.reply_sticker(
                "CAACAgUAAxkBAAIMUGO8z_kVv8pE_UPT0xRQDKa5BYn0AAI9CQACFm7gVI4RHTP_GrcvLQQ"
            )
            time.sleep(1.2)
            K.delete()
            update.effective_message.reply_text(
                PM_START_TEXT.format(
                    escape_markdown(first_name),
                    escape_markdown(uptime),
                    sql.num_users(),
                    sql.num_chats(),
                ),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption=" ú·¥á è BABY‚ù£Ô∏èü•Ä `{}`,\n\n‚ú® …™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è !\n‚û•·¥ú·¥ò·¥õ…™·¥ç·¥á‚ú®: `{}` \n‚û•·¥ús·¥á Äsü•Ä: `{}` \n‚û•·¥Ñ ú·¥Ä·¥õs‚ù£Ô∏è: `{}` ".format(
                usr.first_name,
                uptime,
                sql.num_users(),
                sql.num_chats(),
            ),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="ü´ßÍú±·¥ú·¥ò·¥ò·¥è ÄTü´ß",
                            url=f"https://t.me/Melissasupport",
                        ),
                        InlineKeyboardButton(
                            text="Updates",
                            url=f"https://t.me/MelissaUpdates",
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚ù£Ô∏è·¥è·¥°…¥·¥á Ä‚ù£Ô∏è",
                            url=f"tg://user?id={OWNER_ID}",
                        ),
                        InlineKeyboardButton(
                            text="‚ú®·¥Ñ ü·¥ès·¥á‚ú®",
                            callback_data="close_",
                        ),
                    ],
                ]
            ),
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                " ú·¥á Ä·¥á …™Íú± ·¥õ ú·¥á  ú·¥á ü·¥ò Íú∞·¥è Ä ·¥õ úA ‚ú® *{}* ·¥ç·¥è·¥Ö·¥ú ü·¥á:\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def Melissa_about_callback(update, context):
    query = update.callback_query
    if query.data == "Melissa_":
        query.message.edit_text(
            text="‚ú®ü•Ä‚ù£Ô∏è *I'm {} !*, a powerful group management + music bot built to help you manage your group easily."
            "\n\n Click on button bellow to get basic help for *{} !*.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="üéµ·¥ç·¥úÍú±…™·¥Ñü•Ä", callback_data="Melissa_supports"),
                    InlineKeyboardButton(text="‚öôÔ∏è·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥Tü•Ä", callback_data="help_back"),
                 ],
                 [
                    InlineKeyboardButton(text="‚óÅ", callback_data="Melissa_back"),
                 ]
                ]
            ),
        )
    elif query.data == "Melissa_back":
        first_name = update.effective_user.first_name
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            PM_START_TEXT.format(
                escape_markdown(first_name),
                escape_markdown(uptime),
                sql.num_users(),
                sql.num_chats(),
            ),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )

    elif query.data == "Melissa_admin":
        query.message.edit_text(
            text=f"*‚ú® I'm {BOT_NAME}, ·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü …¢ Ä·¥è·¥ú·¥ò  ô·¥è·¥õ  ô·¥ú…™ ü·¥õ ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥ÄÍú±…™ ü è.*"
            "\n¬ª …™ ·¥Ñ·¥Ä…¥  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ ·¥úÍú±·¥á ÄÍú±."
            "\n¬ª …™ ·¥Ä·¥ç  ô·¥ú…™ ü·¥õ ·¥°…™·¥õ ú [·¥ò è·¥õ ú·¥è…¥](https://www.python.org/) ,[·¥ç·¥è…¥…¢·¥è·¥Ö ô](https://www.mongodb.com/)."
            "\n¬ª ·¥ç è  ô·¥ÄÍú±·¥á …™Íú± ·¥ç·¥Ä·¥Ö·¥á ·¥ú·¥ò ·¥èÍú∞ [·¥õ·¥á ü·¥á·¥õ ú·¥è…¥](https://github.com/LonamiWebs/Telethon) ·¥Ä…¥·¥Ö [·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç](https://github.com/pyrogram/pyrogram)."
            "\n¬ª …™  ú·¥Ä·¥†·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä…¥·¥õ…™-Íú∞ ü·¥è·¥è·¥Ö Íú± èÍú±·¥õ·¥á·¥ç."
            "\n¬ª …™  ú·¥Ä·¥†·¥á …¥Íú±·¥°Íú∞ ·¥õ·¥è ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ ·¥Ä·¥Ö·¥ú ü·¥õ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õÍú± ·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç ·¥ò·¥è Ä…¥·¥è…¢ Ä·¥Ä·¥ò ú…™·¥Ñ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õÍú±."
            "\n¬ª …™ ·¥Ñ·¥Ä…¥ ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç Íú±·¥ò·¥Ä·¥çÍú± ·¥Ä…¥·¥Ö  Ä·¥Ä…™·¥ÖÍú±."
            "\n¬ª …™  ú·¥Ä·¥†·¥á ·¥ç·¥Ä…¥ è ·¥õ·¥è·¥è üÍú± Íú∞·¥è Ä Íú∞·¥ú…¥ ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è·¥ç·¥á…¥·¥õ ·¥õ·¥è ·¥á…¥·¥õ·¥á Ä·¥õ·¥Ä…™…¥  è·¥è·¥ú ·¥Ä ü ü"
            "\n¬ª …™ ·¥Ä·¥ç ·¥ò·¥ú ô ü…™Íú± ú·¥á·¥Ö ·¥ú…¥·¥Ö·¥á Ä  ü…™·¥Ñ·¥á…¥Íú±·¥á :- […¢…¥·¥ú  ü…™·¥Ñ·¥á…¥Íú±·¥á](https://t.me/shaeep43)"
            "\n\n ·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥ús",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="Melissa_back")]]
            ),
        )

    elif query.data == "Melissa_notes":
        query.message.edit_text(
            text=f"<b>‚ú® ·¥úÍú±·¥á Ä~·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±</b>"
            f"\n\n¬ª /play : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ."
            f"\n¬ª /vplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è-·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ."
            f"\n¬ª /cplay : Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ò ü·¥Ä è…™…¥…¢ …¢…™·¥†·¥á…¥ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü"
            f"\n¬ª /loop [·¥Ö…™s·¥Ä ô ü·¥á/·¥á…¥·¥Ä ô ü·¥á] ·¥è Ä [ ô·¥á·¥õ·¥°·¥á·¥á…¥ 1:10] : ·¥° ú·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ ·¥°…™ ü ü ·¥© ü·¥Ä è ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç …™…¥  ü·¥è·¥è·¥© “ì·¥è Ä 10 ·¥õ…™·¥ç·¥ás ·¥è Ä ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ü·¥è·¥è·¥©s."
            f"\n¬ª /shuffle : s ú·¥ú“ì“ì ü·¥á ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs."
            f"\n¬ª /seek : s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥."
            f"\n¬ª /seekback :  ô·¥Ä·¥Ñ·¥ã·¥°·¥Ä Ä·¥Ö s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥."
            f"\n¬ª /song - ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á Íú±·¥è…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è"
            f"\n¬ª /lyrics [s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á] : s·¥á·¥Ä Ä·¥Ñ ú  ü è Ä…™·¥Ñs “ì·¥è Ä ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö s·¥è…¥…¢ ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö ·¥õ ú·¥á  Ä·¥ás·¥ú ü·¥õs.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="Melissa_supports")]]
            ),
        )
    elif query.data == "Melissa_supports":
        query.message.edit_text(
            text="*‚ú® ú·¥á è ·¥õ ú…™s …™s {BOT_NAME}, ·¥ç·¥úÍú±…™·¥Ñ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*"
            "\n\n ú·¥á Ä·¥á …™Íú± {BOT_NAME}, ·¥ç·¥úÍú±…™·¥Ñ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ ú·¥è·¥èÍú±·¥á ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è  è·¥è·¥ú Ä …¥·¥á·¥á·¥ÖÍú±.\n\n·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="‚ú®·¥úÍú±·¥á Ä‚ú®", callback_data="Melissa_notes"),
                    InlineKeyboardButton(text="‚ú®·¥Ä·¥Ö·¥ç…™…¥‚ú®", callback_data="Melissa_credit"),
                 ],
                                  [
                    InlineKeyboardButton(text="‚ù£Ô∏èÍú±·¥ú·¥Ö·¥è‚ù£Ô∏è", callback_data="source_"),
                 
                 ],
                 [
                    InlineKeyboardButton(text="‚óÅ", callback_data="Melissa_"),
                 
                 ]
                ]
            ),
        )


    elif query.data == "Melissa_credit":
        query.message.edit_text(
            text=f"<b>‚ú® ·¥Ä·¥Ö·¥ç…™…¥~·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>"
            f"\n …¥·¥è·¥õ·¥á : ·¥ä·¥ús·¥õ ·¥Ä·¥Ö·¥Ö **·¥Ñ** …™…¥ ·¥õ ú·¥á s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥è“ì ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á·¥ç “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü."
            f"\n\n¬ª /pause : ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç."
            f"\n¬ª /resume :  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç."
            f"\n¬ª /skip : s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ «´·¥ú·¥á·¥ú·¥á."
            f"\n¬ª /end ·¥è Ä /stop : ·¥Ñ ü·¥á·¥Ä Äs ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç."
            f"\n¬ª /player : …¢·¥á·¥õ ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥© ü·¥Ä è·¥á Ä ·¥©·¥Ä…¥·¥á ü."
            f"\n¬ª /queue : s ú·¥è·¥°s ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ü…™s·¥õ."
            f"\n¬ª /auth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á] : ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ä·¥ú·¥õ ú  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ."
            f"\n¬ª /unauth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á] :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ."
            f"\n¬ª /authusers : s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥©.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="‚óÅ", callback_data="Melissa_supports"),
                 ]
                ]
            ),
        )

def Source_about_callback(update, context):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_text(
            text=f"<b>‚ú® s·¥ú·¥Ö·¥è~·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>"
            f"\n\n¬ª /blacklistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] :  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ."
            f"\n¬ª /whitelistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] : ·¥° ú…™·¥õ·¥á ü…™s·¥õ ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ."
            f"\n¬ª /blacklistedchat : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs."
            f"\n¬ª /block [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä] : s·¥õ·¥Ä Ä·¥õs …™…¢…¥·¥è Ä…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä, s·¥è ·¥õ ú·¥Ä·¥õ  ú·¥á ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös."
            f"\n¬ª /unblock [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : ·¥ú…¥ ô ü·¥è·¥Ñ·¥ãs ·¥õ ú·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Ä."
            f"\n¬ª /blockedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs."
            f"\n¬ª /get_log […¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  ü…™…¥·¥ás] : …¢·¥á·¥õ  ü·¥è…¢s ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ [·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ ·¥†·¥Ä ü·¥ú·¥á …™s 100  ü…™…¥·¥ás]"
            f"\n¬ª /logger [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] :  ô·¥è·¥õ ·¥°…™ ü ü s·¥õ·¥Ä Ä·¥õ  ü·¥è…¢…¢…™…¥…¢ ·¥õ ú·¥á ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ…™·¥ás  ú·¥Ä·¥©·¥©·¥á…¥ ·¥è…¥  ô·¥è·¥õ."
            f"\n¬ª /restart :  Ä·¥ás·¥õ·¥Ä Ä·¥õs  è·¥è·¥ú Ä  ô·¥è·¥õ.",
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                    InlineKeyboardButton(text="‚óÅ", callback_data="Melissa_supports")
                 ]
                ]
            ),
        )
    elif query.data == "source_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
                PM_START_TEXT.format(
                    escape_markdown(first_name),
                    escape_markdown(uptime),
                    sql.num_users(),
                    sql.num_chats()),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
                disable_web_page_preview=False,
        )


def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text=" ú·¥á ü·¥ò",
                                url="https://t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "¬ª ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥©·¥õ…™·¥è…¥ “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ú·¥á ü·¥©.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥ …™…¥ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á",
                            url="https://t.me/{}?start=help".format(
                                context.bot.username
                            ),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥  ú·¥á Ä·¥á",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}*  ú·¥ÄÍú± ·¥õ ú·¥á Íú∞·¥è ü ü·¥è·¥°…™…¥…¢ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä ·¥õ ú·¥á *{}* ·¥ç·¥è·¥Ö·¥ú ü·¥á:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
        " ú…™ ·¥õ ú·¥á Ä·¥á! ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á Q·¥ú…™·¥õ·¥á ·¥Ä Íú∞·¥á·¥° Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {} - …¢·¥è ·¥Ä ú·¥á·¥Ä·¥Ö ·¥Ä…¥·¥Ö ·¥ò…™·¥Ñ·¥ã ·¥° ú·¥Ä·¥õ "
                " è·¥è·¥ú' Ä·¥á …™…¥·¥õ·¥á Ä·¥áÍú±·¥õ·¥á·¥Ö …™…¥.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                " ú…™ ·¥õ ú·¥á Ä·¥á! ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á Q·¥ú…™·¥õ·¥á ·¥Ä Íú∞·¥á·¥° Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {} - …¢·¥è ·¥Ä ú·¥á·¥Ä·¥Ö ·¥Ä…¥·¥Ö ·¥ò…™·¥Ñ·¥ã ·¥° ú·¥Ä·¥õ "
                " è·¥è·¥ú' Ä·¥á …™…¥·¥õ·¥á Ä·¥áÍú±·¥õ·¥á·¥Ö …™…¥.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text=" ú…™ ·¥õ ú·¥á Ä·¥á! ·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á Q·¥ú…™·¥õ·¥á ·¥Ä Íú∞·¥á·¥° Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± Íú∞·¥è Ä {} - …¢·¥è ·¥Ä ú·¥á·¥Ä·¥Ö ·¥Ä…¥·¥Ö ·¥ò…™·¥Ñ·¥ã ·¥° ú·¥Ä·¥õ "
                " è·¥è·¥ú' Ä·¥á …™…¥·¥õ·¥á Ä·¥áÍú±·¥õ·¥á·¥Ö …™…¥.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± …¥·¥è·¥õ ·¥ç·¥è·¥Ö…™Íú∞…™·¥á·¥Ö",
            "Q·¥ú·¥á Ä è_…™·¥Ö_…™…¥·¥†·¥Ä ü…™·¥Ö",
            "·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö",
        ]:
            LOGGER.exception("·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ …™…¥ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±  ô·¥ú·¥õ·¥õ·¥è…¥Íú±. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú…™Íú± ·¥Ñ ú·¥Ä·¥õ'Íú± Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±, ·¥ÄÍú± ·¥°·¥á ü ü ·¥ÄÍú±  è·¥è·¥ú ÄÍú±."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚ú®Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±‚ú®",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± BABY."

    else:
        send_settings(chat.id, user.id, True)


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 5518757491:
            update.effective_message.reply_text(
                "…™'·¥ç Íú∞ Ä·¥á·¥á Íú∞·¥è Ä ·¥á·¥†·¥á Ä è·¥è…¥·¥á üñ§ …™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥á Íú±·¥ç…™ ü·¥á, ·¥ä·¥úÍú±·¥õ ·¥ä·¥è…™…¥"
                "[My Channel]({})".format(DONATION_LINK),
                parse_mode=ParseMode.MARKDOWN,
            )
    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

            update.effective_message.reply_text(
                "…™'·¥†·¥á ·¥ò·¥ç'·¥á·¥Ö  è·¥è·¥ú ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç Íú∞…™ ÄÍú±·¥õ ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("·¥ç…™…¢ Ä·¥Ä·¥õ…™…¥…¢ Íú∞ Ä·¥è·¥ç %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥ç…™…¢ Ä·¥Ä·¥õ·¥á·¥Ö!")
    raise DispatcherHandlerStop


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.sendAnimation(
                f"@{SUPPORT_CHAT}",
                animation="https://te.legra.ph/file/76242492a4a2d080875af.mp4",
                caption=f"""
„Ö§{dispatcher.bot.first_name} …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è .....
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
¬ª **‚ú® ·¥è·¥°…¥·¥á Ä ‚ù£Ô∏è :** [PiÕ¢Õ¢Õ¢k‡∏™c—íu‚ô°](https://t.me/shaeep43)
¬ª **ü•Ä  ü…™ ô Ä·¥Ä Ä è ü•Ä  :** `{telever}`
¬ª **ü•Ä ·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ü•Ä :** `{tlhver}`
¬ª **ü•Ä ·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ü•Ä :** `{pyrover}`
¬ª **ü•Ä ·¥ç·¥è…¥…¢·¥è ·¥Ö ô ü•Ä :** `3.9.0`
¬ª **ü•Ä Íú±«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è ü•Ä :** `1.4.31`
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ú®ü•Ä‚ù£Ô∏è ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ü•Ä : [üáÆ üá∑ üá¥ ](https://t.me/MelissaUpdates)

""",
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                " ô·¥è·¥õ …™s…¥·¥õ ·¥Ä ô ü·¥á ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è support_chat, …¢·¥è ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã !"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    test_handler = CommandHandler("test", test, run_async=True)
    start_handler = CommandHandler("start", start, run_async=True)

    help_handler = CommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = CommandHandler("settings", get_settings, run_async=True)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    about_callback_handler = CallbackQueryHandler(
        Melissa_about_callback, pattern=r"Melissa_", run_async=True
    )

    source_callback_handler = CallbackQueryHandler(
        Source_about_callback, pattern=r"source_", run_async=True
    )

    donate_handler = CommandHandler("donate", donate, run_async=True)
    migrate_handler = MessageHandler(
        Filters.status_update.migrate, migrate_chats, run_async=True
    )

    dispatcher.add_handler(test_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(source_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    LOGGER.info("Using long polling.")
    updater.start_polling(timeout=15, read_latency=4, drop_pending_updates=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
